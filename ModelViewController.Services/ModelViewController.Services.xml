<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ModelViewController.Services</name>
    </assembly>
    <members>
        <member name="T:ModelViewController.Services.Extensions.FileLoggerExtensions">
            <summary>
            FileLoggerExtensions static class.
            </summary>
        </member>
        <member name="M:ModelViewController.Services.Extensions.FileLoggerExtensions.AddFile(Microsoft.Extensions.Logging.ILoggerFactory,System.String)">
            <summary>
            AddFile mehod.
            </summary>
            <param name="factory">factory.</param>
            <param name="filePath">filePath.</param>
            <returns>ILoggerFactory.</returns>
        </member>
        <member name="T:ModelViewController.Services.FileLogger">
            <summary>
            FileLogger class.
            </summary>
        </member>
        <member name="M:ModelViewController.Services.FileLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelViewController.Services.FileLogger"/> class.
            </summary>
            <param name="path">path/</param>
        </member>
        <member name="M:ModelViewController.Services.FileLogger.BeginScope``1(``0)">
            <summary>
            BeginScope method.
            </summary>
            <typeparam name="TState">TState.</typeparam>
            <param name="state">state.</param>
            <returns>IDisposable.</returns>
        </member>
        <member name="M:ModelViewController.Services.FileLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            IsEnabled method.
            </summary>
            <param name="logLevel">logLevel.</param>
            <returns>bool.</returns>
        </member>
        <member name="M:ModelViewController.Services.FileLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <summary>
            Log method.
            </summary>
            <typeparam name="TState">TState.</typeparam>
            <param name="logLevel">logLevel.</param>
            <param name="eventId">eventId.</param>
            <param name="state">state.</param>
            <param name="exception">exception.</param>
            <param name="formatter">formatter.</param>
        </member>
        <member name="T:ModelViewController.Services.Providers.FileLoggerProvider">
            <summary>
            FileLoggerProvider class.
            </summary>
        </member>
        <member name="M:ModelViewController.Services.Providers.FileLoggerProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelViewController.Services.Providers.FileLoggerProvider"/> class.
            </summary>
            <param name="_path">path.</param>
        </member>
        <member name="M:ModelViewController.Services.Providers.FileLoggerProvider.CreateLogger(System.String)">
            <summary>
            CreateLogger method.
            </summary>
            <param name="categoryName">categoryName.</param>
            <returns>ILogger.</returns>
        </member>
        <member name="M:ModelViewController.Services.Providers.FileLoggerProvider.Dispose">
            <summary>
            Dispose method.
            </summary>
        </member>
        <member name="T:ModelViewController.Services.AwardRepository">
            <summary>
            .
            </summary>
        </member>
        <member name="M:ModelViewController.Services.AwardRepository.#ctor(ModelViewController.DAL.ApplicationContext,Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelViewController.Services.AwardRepository"/> class.
            </summary>
            <param name="context">ApplicationContext.</param>
            <param name="appEnvironment">IHostingEnvironment.</param>
        </member>
        <member name="M:ModelViewController.Services.AwardRepository.Add(ModelViewController.DAL.Entities.Award)">
            <summary>
            Add method.
            </summary>
            <param name="award">Award.</param>
            <returns>award.</returns>
        </member>
        <member name="M:ModelViewController.Services.AwardRepository.Find(System.Nullable{System.Guid})">
            <summary>
            Find method.
            </summary>
            <param name="id">id.</param>
            <returns>award.</returns>
        </member>
        <member name="M:ModelViewController.Services.AwardRepository.GetAll">
            <summary>
            GetAll method.
            </summary>
            <returns>awards.</returns>
        </member>
        <member name="M:ModelViewController.Services.AwardRepository.GetAllAsync">
            <summary>
            GetAllAsync method.
            </summary>
            <returns>awards.</returns>
        </member>
        <member name="M:ModelViewController.Services.AwardRepository.Filter(System.String)">
            <summary>
            Filter method.
            </summary>
            <param name="name">Name.</param>
            <returns>users.</returns>
        </member>
        <member name="M:ModelViewController.Services.AwardRepository.Remove(System.Guid)">
            <summary>
            Remove method.
            </summary>
            <param name="id">id.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:ModelViewController.Services.AwardRepository.Update(ModelViewController.DAL.Entities.Award)">
            <summary>
            Update method.
            </summary>
            <param name="award">award.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:ModelViewController.Services.AwardRepository.AddFile(ModelViewController.DAL.Entities.Award,Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            AddFile method.
            </summary>
            <param name="award">awawrd.</param>
            <param name="uploadedFile">IFormFile.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:ModelViewController.Services.AwardRepository.RemoveFile(System.String)">
            <summary>
            RemoveFile method.
            </summary>
            <param name="path">path.</param>
        </member>
        <member name="T:ModelViewController.Services.RoleRepository">
            <summary>
            RoleRepository class.
            </summary>
        </member>
        <member name="M:ModelViewController.Services.RoleRepository.#ctor(ModelViewController.DAL.ApplicationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelViewController.Services.RoleRepository"/> class.
            </summary>
            <param name="context">context.</param>
        </member>
        <member name="M:ModelViewController.Services.RoleRepository.Add(ModelViewController.DAL.Entities.Role)">
            <summary>
            Add method.
            </summary>
            <param name="role">item.</param>
            <returns>added item.</returns>
        </member>
        <member name="M:ModelViewController.Services.RoleRepository.Find(System.Nullable{System.Guid})">
            <summary>
            Find method.
            </summary>
            <param name="id">id.</param>
            <returns>item.</returns>
        </member>
        <member name="M:ModelViewController.Services.RoleRepository.GetAll">
            <summary>
            GetAll method.
            </summary>
            <returns>roles.</returns>
        </member>
        <member name="M:ModelViewController.Services.RoleRepository.GetAllAsync">
            <summary>
            GetAllAsync method.
            </summary>
            <returns>roles.</returns>
        </member>
        <member name="M:ModelViewController.Services.RoleRepository.Remove(System.Guid)">
            <summary>
            Remove method.
            </summary>
            <param name="id">id.</param>
            <returns>task.</returns>
        </member>
        <member name="M:ModelViewController.Services.RoleRepository.Update(ModelViewController.DAL.Entities.Role)">
            <summary>
            Update method.
            </summary>
            <param name="role">item.</param>
            <returns>task.</returns>
        </member>
        <member name="T:ModelViewController.Services.UserRepository">
            <summary>
            UserRepository.
            </summary>
        </member>
        <member name="M:ModelViewController.Services.UserRepository.#ctor(ModelViewController.DAL.ApplicationContext,Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelViewController.Services.UserRepository"/> class.
            </summary>
            <param name="context">ApplicationContext.</param>
            <param name="appEnvironment">IHostingEnvironment.</param>
        </member>
        <member name="M:ModelViewController.Services.UserRepository.Add(ModelViewController.DAL.Entities.User)">
            <summary>
            Add method.
            </summary>
            <param name="user">User.</param>
            <returns>user.</returns>
        </member>
        <member name="M:ModelViewController.Services.UserRepository.Find(System.Nullable{System.Guid})">
            <summary>
            Find method.
            </summary>
            <param name="id">id.</param>
            <returns>user.</returns>
        </member>
        <member name="M:ModelViewController.Services.UserRepository.GetAll">
            <summary>
            GetAll method.
            </summary>
            <returns>users.</returns>
        </member>
        <member name="M:ModelViewController.Services.UserRepository.GetAllAsync">
            <summary>
            GetAllAsync method.
            </summary>
            <returns>users.</returns>
        </member>
        <member name="M:ModelViewController.Services.UserRepository.Filter(System.String)">
            <summary>
            Filter method.
            </summary>
            <param name="name">Name.</param>
            <returns>users.</returns>
        </member>
        <member name="M:ModelViewController.Services.UserRepository.GetUserRoles(System.Nullable{System.Guid})">
            <summary>
            GetUserRoles.
            </summary>
            <param name="id">id.</param>
            <returns>roles.</returns>
        </member>
        <member name="M:ModelViewController.Services.UserRepository.GetUserAwards(System.Nullable{System.Guid})">
            <summary>
            GetUserAwards.
            </summary>
            <param name="id">id.</param>
            <returns>awards.</returns>
        </member>
        <member name="M:ModelViewController.Services.UserRepository.Remove(System.Guid)">
            <summary>
            Remove method.
            </summary>
            <param name="id">id.</param>
            <returns>task.</returns>
        </member>
        <member name="M:ModelViewController.Services.UserRepository.Update(ModelViewController.DAL.Entities.User)">
            <summary>
            Update method.
            </summary>
            <param name="user">User.</param>
            <returns>task.</returns>
        </member>
        <member name="M:ModelViewController.Services.UserRepository.AddFile(ModelViewController.DAL.Entities.User,Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            AddFile method.
            </summary>
            <param name="user">User.</param>
            <param name="uploadedFile">IFormFile.</param>
            <returns>task.</returns>
        </member>
        <member name="M:ModelViewController.Services.UserRepository.AddAwards(ModelViewController.DAL.Entities.User,System.Collections.Generic.List{ModelViewController.DAL.Entities.Award})">
            <summary>
            AddAwards method.
            </summary>
            <param name="user">User.</param>
            <param name="awards">Awards.</param>
            <returns>task.</returns>
        </member>
        <member name="M:ModelViewController.Services.UserRepository.RemoveFile(System.String)">
            <summary>
            RemoveFile method.
            </summary>
            <param name="path">path.</param>
        </member>
        <member name="M:ModelViewController.Services.UserRepository.AddUserAwards(ModelViewController.DAL.Entities.User,System.Guid)">
            <summary>
            UpdateUserAwards method.
            </summary>
            <param name="user">User.</param>
            <param name="award">Award.</param>
            <returns>task.</returns>
        </member>
        <member name="M:ModelViewController.Services.UserRepository.UpdateUserAwards(ModelViewController.DAL.Entities.User,System.Collections.Generic.List{System.Guid})">
            <summary>
            UpdateUserAwards method.
            </summary>
            <param name="user">User.</param>
            <param name="awards">Awards.</param>
            <returns>task.</returns>
        </member>
        <member name="M:ModelViewController.Services.UserRepository.UpdateUserRoles(ModelViewController.DAL.Entities.User,System.Collections.Generic.List{System.Guid})">
            <summary>
            UpdateUserRoles method.
            </summary>
            <param name="user">user.</param>
            <param name="roles">roles.</param>
            <returns>>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
    </members>
</doc>
