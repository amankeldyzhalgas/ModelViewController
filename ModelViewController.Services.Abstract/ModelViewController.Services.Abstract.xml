<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ModelViewController.Services.Abstract</name>
    </assembly>
    <members>
        <member name="T:ModelViewController.Services.Abstract.IAwardRepository`1">
            <summary>
            IAwardRepository interface.
            </summary>
            <typeparam name="T">item.</typeparam>
        </member>
        <member name="M:ModelViewController.Services.Abstract.IAwardRepository`1.Add(`0)">
            <summary>
            Add method.
            </summary>
            <param name="item">item.</param>
            <returns>task item.</returns>
        </member>
        <member name="M:ModelViewController.Services.Abstract.IAwardRepository`1.Remove(System.Guid)">
            <summary>
            Remove method.
            </summary>
            <param name="id">id.</param>
            <returns>task.</returns>
        </member>
        <member name="M:ModelViewController.Services.Abstract.IAwardRepository`1.Update(`0)">
            <summary>
            Update method.
            </summary>
            <param name="item">item.</param>
            <returns>task.</returns>
        </member>
        <member name="M:ModelViewController.Services.Abstract.IAwardRepository`1.GetAll">
            <summary>
            GetAll method.
            </summary>
            <returns>item.</returns>
        </member>
        <member name="M:ModelViewController.Services.Abstract.IAwardRepository`1.GetAllAsync">
            <summary>
            GetAllAsync method.
            </summary>
            <returns>list item.</returns>
        </member>
        <member name="M:ModelViewController.Services.Abstract.IAwardRepository`1.Filter(System.String)">
            <summary>
            Filter method.
            </summary>
            <param name="param">param.</param>
            <returns>list item.</returns>
        </member>
        <member name="M:ModelViewController.Services.Abstract.IAwardRepository`1.Find(System.Nullable{System.Guid})">
            <summary>
            Find method.
            </summary>
            <param name="id">id.</param>
            <returns>item.</returns>
        </member>
        <member name="M:ModelViewController.Services.Abstract.IAwardRepository`1.AddFile(`0,Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            AddFile method.
            </summary>
            <param name="item">item.</param>
            <param name="uploadedFile">IFormFile.</param>
            <returns>task.</returns>
        </member>
        <member name="M:ModelViewController.Services.Abstract.IAwardRepository`1.RemoveFile(System.String)">
            <summary>
            RemoveFile method.
            </summary>
            <param name="path">path.</param>
        </member>
        <member name="T:ModelViewController.Services.Abstract.IRoleRepository`1">
            <summary>
            IRoleRepository interface.
            </summary>
            <typeparam name="T">item.</typeparam>
        </member>
        <member name="M:ModelViewController.Services.Abstract.IRoleRepository`1.Add(`0)">
            <summary>
            Add method.
            </summary>
            <param name="item">item.</param>
            <returns>task item.</returns>
        </member>
        <member name="M:ModelViewController.Services.Abstract.IRoleRepository`1.Remove(System.Guid)">
            <summary>
            Remove method.
            </summary>
            <param name="id">id.</param>
            <returns>task.</returns>
        </member>
        <member name="M:ModelViewController.Services.Abstract.IRoleRepository`1.Update(`0)">
            <summary>
            Update method.
            </summary>
            <param name="item">item.</param>
            <returns>task.</returns>
        </member>
        <member name="M:ModelViewController.Services.Abstract.IRoleRepository`1.GetAll">
            <summary>
            GetAll method.
            </summary>
            <returns>item.</returns>
        </member>
        <member name="M:ModelViewController.Services.Abstract.IRoleRepository`1.GetAllAsync">
            <summary>
            GetAllAsync method.
            </summary>
            <returns>list item.</returns>
        </member>
        <member name="M:ModelViewController.Services.Abstract.IRoleRepository`1.Find(System.Nullable{System.Guid})">
            <summary>
            Find method.
            </summary>
            <param name="id">id.</param>
            <returns>item.</returns>
        </member>
        <member name="T:ModelViewController.Services.Abstract.IUserRepository`1">
            <summary>
            IRepository interface.
            </summary>
            <typeparam name="T">Object.</typeparam>
        </member>
        <member name="M:ModelViewController.Services.Abstract.IUserRepository`1.Add(`0)">
            <summary>
            Add method.
            </summary>
            <param name="item">item.</param>
            <returns>task item.</returns>
        </member>
        <member name="M:ModelViewController.Services.Abstract.IUserRepository`1.Remove(System.Guid)">
            <summary>
            Remove method.
            </summary>
            <param name="id">id.</param>
            <returns>task.</returns>
        </member>
        <member name="M:ModelViewController.Services.Abstract.IUserRepository`1.Update(`0)">
            <summary>
            Update method.
            </summary>
            <param name="item">item.</param>
            <returns>task.</returns>
        </member>
        <member name="M:ModelViewController.Services.Abstract.IUserRepository`1.GetAll">
            <summary>
            GetAll method.
            </summary>
            <returns>item.</returns>
        </member>
        <member name="M:ModelViewController.Services.Abstract.IUserRepository`1.GetAllAsync">
            <summary>
            GetAllAsync method.
            </summary>
            <returns>list item.</returns>
        </member>
        <member name="M:ModelViewController.Services.Abstract.IUserRepository`1.Filter(System.String)">
            <summary>
            Filter method.
            </summary>
            <param name="param">param.</param>
            <returns>list item.</returns>
        </member>
        <member name="M:ModelViewController.Services.Abstract.IUserRepository`1.GetUserRoles(System.Nullable{System.Guid})">
            <summary>
            GetUserRoles method.
            </summary>
            <param name="id">id.</param>
            <returns>roles.</returns>
        </member>
        <member name="M:ModelViewController.Services.Abstract.IUserRepository`1.GetUserAwards(System.Nullable{System.Guid})">
            <summary>
            GetUserAwards method.
            </summary>
            <param name="id">id.</param>
            <returns>awards.</returns>
        </member>
        <member name="M:ModelViewController.Services.Abstract.IUserRepository`1.Find(System.Nullable{System.Guid})">
            <summary>
            Find method.
            </summary>
            <param name="id">id.</param>
            <returns>item.</returns>
        </member>
        <member name="M:ModelViewController.Services.Abstract.IUserRepository`1.AddFile(`0,Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            AddFile method.
            </summary>
            <param name="item">item.</param>
            <param name="uploadedFile">IFormFile.</param>
            <returns>task.</returns>
        </member>
        <member name="M:ModelViewController.Services.Abstract.IUserRepository`1.RemoveFile(System.String)">
            <summary>
            RemoveFile method.
            </summary>
            <param name="path">path.</param>
        </member>
        <member name="M:ModelViewController.Services.Abstract.IUserRepository`1.AddUserAwards(ModelViewController.DAL.Entities.User,System.Guid)">
            <summary>
            AddUserAwards method.
            </summary>
            <param name="user">user.</param>
            <param name="award">award.</param>
            <returns>task.</returns>
        </member>
        <member name="M:ModelViewController.Services.Abstract.IUserRepository`1.UpdateUserAwards(`0,System.Collections.Generic.List{System.Guid})">
            <summary>
            UpdateUserAwards method.
            </summary>
            <param name="item">item.</param>
            <param name="list">list.</param>
            <returns>task.</returns>
        </member>
        <member name="M:ModelViewController.Services.Abstract.IUserRepository`1.UpdateUserRoles(`0,System.Collections.Generic.List{System.Guid})">
            <summary>
            UpdateUserAwards method.
            </summary>
            <param name="item">item.</param>
            <param name="list">list.</param>
            <returns>task.</returns>
        </member>
    </members>
</doc>
